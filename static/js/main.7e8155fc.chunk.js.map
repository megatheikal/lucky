{"version":3,"sources":["logo.svg","web3.js","lucky.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","web3","Web3","window","ethereum","enable","eth","Contract","constant","inputs","name","outputs","type","payable","stateMutability","App","state","manager","players","balance","value","message","onSubmit","event","a","preventDefault","getAccounts","accounts","setState","lucky","methods","enter","send","from","utils","toWei","onClick","pickLucky","call","getPlayers","getBalance","options","address","this","length","fromWei","onChange","target","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.7e8155fc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import Web3 from 'web3';\n\nconst web3 = new Web3(window.ethereum); // pass metamask library\nwindow.ethereum.enable(); //enable the connection\nexport default web3;//export the object to other components\n","import web3 from './web3';\n\nconst address = '0xb61e95850D897EB7E0655D5724be055bAc78A6D2';\n\nconst abi = [\n  {\n    constant: true,\n    inputs: [],\n    name: 'manager',\n    outputs: [ { name: '', type: 'address' } ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'random',\n    outputs: [ { name: '', type: 'uint256' } ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [],\n    name: 'pickLucky',\n    outputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: 'getPlayers',\n    outputs: [ { name: '', type: 'address[]' } ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: true,\n    inputs: [ { name: '', type: 'uint256' } ],\n    name: 'player',\n    outputs: [ { name: '', type: 'address' } ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    constant: false,\n    inputs: [],\n    name: 'enter',\n    outputs: [],\n    payable: true,\n    stateMutability: 'payable',\n    type: 'function'\n  },\n  {\n    inputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'constructor'\n  }\n];\n\nexport default new web3.eth.Contract(abi, address);\n","import React, { Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport web3 from './web3';\nimport lucky from './lucky';\nclass App extends Component {\n\nstate ={\n    manager: '',\n    players: [],\n    balance: '',\n    value: '',\n    message: ''\n};\n// this method to setup the contract\nasync componentDidMount(){\n  const manager = await lucky.methods.manager().call(); //no need to specify the property\n  const players = await lucky.methods.getPlayers().call(); //get the number of player\n  const balance = await web3.eth.getBalance(lucky.options.address); //get the balance\n  this.setState({ manager, players, balance });\n}\n\n//method for Enter the contract\nonSubmit = async (event) =>{\n  event.preventDefault();\n   const accounts = await web3.eth.getAccounts();\n\n   //initialise early message\n   this.setState({ message: 'Waiting on transaction success....'});\n\n   await lucky.methods.enter().send({\n     from: accounts[0],\n     value: web3.utils.toWei(this.state.value,'ether')\n   });\n\n   //update message\n   this.setState({ message: 'You have been entered!'});\n\n};\n\n//method for get method\nonClick = async () =>{\n\n  const accounts = await web3.eth.getAccounts();\n\n  //initialise early message\n  this.setState({ message: 'Waiting on transaction success....'});\n  //call method\n  await lucky.methods.pickLucky().send({\n    from: accounts[0],\n  });\n  //show message if transaction succesful\n  this.setState({ message: 'A winner has been picked!'});\n\n};\n\n\n//read the state and produce UI\nrender(){\n//console.log(web3.version); //test the network\n//web3.givenProvider.enable().then(console.log); //try get account\n\n  return (\n   <div>\n   <h2> Lucky Draw Contract</h2>\n   <p>\n    This contract is managed by { this.state.manager}.\n     There are currently {this.state.players.length} people entered, competing to\n    win {web3.utils.fromWei(this.state.balance, 'ether')}</p>\n\n    <hr />\n\n    <form onSubmit={this.onSubmit}>\n      <h4>Want to try your luck?</h4>\n        <div>\n          <label>Amount of ether to enter </label>\n            <input\n            value={this.state.value}\n            onChange={event => this.setState({value: event.target.value})}\n            />\n        </div>\n        <button>Enter</button>\n    </form>\n\n    <hr />\n    <h4>Ready to pick a a winner?</h4>\n    <button onClick={this.onClick}> Pick a winner?</button>\n    <hr />\n    <h1>{this.state.message}</h1>\n\n   </div>\n  );\n\n\n}\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}